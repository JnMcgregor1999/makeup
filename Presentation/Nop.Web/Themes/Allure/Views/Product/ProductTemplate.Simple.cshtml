@model ProductDetailsModel
@using Nop.Core
@using Nop.Core.Domain.Seo;
@using Nop.Services.Configuration
@using Nop.Core.Domain.Catalog
@inject Nop.Core.IWebHelper webHelper 
@inject IStoreContext storeContext
@inject IWorkContext workContext
@inject ISettingService settingService
@inject SeoSettings seoSettings
@inject CatalogSettings catalogSettings
@{
    Layout = "_ColumnsOne";

    //title
    Html.AddTitleParts(!string.IsNullOrEmpty(Model.MetaTitle) ? Model.MetaTitle : Model.Name);
    //meta
    Html.AddMetaDescriptionParts(Model.MetaDescription);
    Html.AddMetaKeywordParts(Model.MetaKeywords);
    //page class
    Html.AppendPageCssClassParts("html-product-details-page");
    //canonical URL
    if (seoSettings.CanonicalUrlsEnabled)
    {
        var productUrl = Url.RouteUrl("Product", new { SeName = Model.SeName }, webHelper.CurrentRequestProtocol).ToLowerInvariant();
        Html.AddCanonicalUrlParts(productUrl, seoSettings.QueryStringInCanonicalUrlsEnabled);
    }

    //open graph META tags
    if (seoSettings.OpenGraphMetaTags)
    {
        Html.AddHeadCustomParts("<meta property=\"og:type\" content=\"product\" />");
        Html.AddHeadCustomParts("<meta property=\"og:title\" content=\"" + Html.Encode(Model.Name) + "\" />");
        Html.AddHeadCustomParts("<meta property=\"og:description\" content=\"" + Html.Encode(Nop.Core.Html.HtmlHelper.StripTags(Model.MetaDescription)) + "\" />");
        Html.AddHeadCustomParts("<meta property=\"og:image\" content=\"" + Model.DefaultPictureModel.ImageUrl + "\" />");
        Html.AddHeadCustomParts("<meta property=\"og:image:url\" content=\"" + Model.DefaultPictureModel.ImageUrl + "\" />");
        Html.AddHeadCustomParts("<meta property=\"og:url\" content=\"" + webHelper.GetThisPageUrl(false) + "\" />");
        Html.AddHeadCustomParts("<meta property=\"og:site_name\" content=\"" + Html.Encode(Model.CurrentStoreName) + "\" />");
    }

    var showShareButton = catalogSettings.ShowShareButton;

    //Twitter META tags
    if (seoSettings.TwitterMetaTags)
    {
        Html.AddHeadCustomParts("<meta property=\"twitter:card\" content=\"summary\" />");
        Html.AddHeadCustomParts("<meta property=\"twitter:site\" content=\"" + Html.Encode(Model.CurrentStoreName) + "\" />");
        Html.AddHeadCustomParts("<meta property=\"twitter:title\" content=\"" + Html.Encode(Model.Name) + "\" />");
        Html.AddHeadCustomParts("<meta property=\"twitter:description\" content=\"" + Html.Encode(Nop.Core.Html.HtmlHelper.StripTags(Model.MetaDescription)) + "\" />");
        Html.AddHeadCustomParts("<meta property=\"twitter:image\" content=\"" + Model.DefaultPictureModel.ImageUrl + "\" />");
        Html.AddHeadCustomParts("<meta property=\"twitter:url\" content=\"" + webHelper.GetThisPageUrl(false) + "\" />");
    }

    var storeId = storeContext.CurrentStore.Id;
    var alternativeProductPageLayout = settingService.GetSettingByKey("allurethemesettings.alternativeproductpagelayout", false, storeId, true);
    var alternaticeProductPageLayoutCss = String.Empty;
    if (alternativeProductPageLayout)
    {
        alternaticeProductPageLayoutCss = "product-page-alternative-layout";
    }
}
<!--product breadcrumb-->
@await Html.PartialAsync("_ProductBreadcrumb", Model.Breadcrumb)

<div class="product-page-wrapper" itemscope itemtype="http://schema.org/Product">
    <!--product breadcrumb-->
    <div class="product-name">
        <h1 itemprop="name">
            @Model.Name
        </h1>
        @await Component.InvokeAsync("Widget", new { widgetZone = "productname_bottom", additionalData =  Model.Id})
    </div>
    <div class="page product-details-page @alternaticeProductPageLayoutCss">
        <div class="page-body">
        	@await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.ProductDetailsTop, additionalData = Model })
        	<form asp-route="Product" asp-route-sename="@Model.SeName" method="post" id="product-details-form">
                <div data-productid="@Model.Id">
                    <div class="product-essential">     
	                    @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.ProductDetailsEssentialTop, additionalData = Model })
						@{
                            var picturesInTabHtml = await Component.InvokeAsync("Widget", new { widgetZone = "product_pictures_in_tabs", Model.Id});

                            if (!String.IsNullOrEmpty(picturesInTabHtml.ToHtmlString()) && !alternativeProductPageLayout)
                            {
                                @picturesInTabHtml
                            }
                            else
                            {
                                var cloudZoom =  await Component.InvokeAsync("Widget", new { widgetZone ="sevenspikes_cloud_zoom"});;
                                if (!String.IsNullOrEmpty(cloudZoom.ToHtmlString()))
		                    {
		                        @cloudZoom
		                    }
		                    else
		                    {
		                    	@await Html.PartialAsync("_ProductDetailsPictures", Model)
		                    }
                            }
                        }
                        <div class="overview">
                        @await Html.PartialAsync("_Discontinued", Model)
                            @if (!string.IsNullOrEmpty(Model.ShortDescription))
                            {
                                <div class="short-description">
                                    @Html.Raw(Model.ShortDescription)
                                </div>
                            }
                            <!--rental products-->
                            @{
	                            var dataDictRental = new ViewDataDictionary(ViewData);
	                            dataDictRental.TemplateInfo.HtmlFieldPrefix = $"rental_{Model.Id}";
	                            @await Html.PartialAsync("_RentalInfo", Model, dataDictRental)
                            }
                            @{
	                           var dataDictPrice = new ViewDataDictionary(ViewData);
	                            dataDictPrice.TemplateInfo.HtmlFieldPrefix = $"price_{Model.Id}";
	                            @await Html.PartialAsync("_ProductPrice", Model.ProductPrice, dataDictPrice)
                            }

                            <!--product reviews-->
                            @await Html.PartialAsync("_ProductReviewOverview", Model.ProductReviewOverview)
                            <div class="buttons">
                                @await Component.InvokeAsync("Widget", new { widgetZone = "productdetails_inside_overview_buttons_before", Model.Id})
                                @{
	                            var dataDictAddToWishlist = new ViewDataDictionary(ViewData);
	                            dataDictAddToWishlist.TemplateInfo.HtmlFieldPrefix = $"addtocart_{Model.Id}";
	                            @await Html.PartialAsync("_AddToWishlist", Model.AddToCart, dataDictAddToWishlist)
                                }
                                @Html.Partial("_CompareProductsButton", Model)
                                @Html.Partial("_ProductEmailAFriendButton", Model)
                                @await Component.InvokeAsync("Widget", new { widgetZone = "productdetails_inside_overview_buttons_after", Model.Id})
                            </div>
                            
                            @if (showShareButton)
                            {
                                @await Html.PartialAsync("_ShareButton", Model)
                            }
                        @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.ProductDetailsOverviewTop, additionalData = Model })
                            <!--availability-->
                            @await Html.PartialAsync("_Availability", Model)
                            <!--SKU, MAN, GTIN, vendor-->
                            @await Html.PartialAsync("_SKU_Man_GTIN_Ven", Model)
                            <!--delivery-->
                            @await Html.PartialAsync("_DeliveryInfo", Model)
                            <!--product manufacturers-->
                            @await Html.PartialAsync("_ProductManufacturers", Model.ProductManufacturers)
                            <!--sample download-->
                            @await Html.PartialAsync("_DownloadSample", Model)
                            <!--attributes-->
                            @{
	                            var dataDictAttributes = new ViewDataDictionary(ViewData);
	                            dataDictAttributes.TemplateInfo.HtmlFieldPrefix = $"attributes_{Model.Id}";
	                            @await Html.PartialAsync("_ProductAttributes", Model.ProductAttributes, dataDictAttributes)
                            }

                            <!--price & add to cart-->
                            @{

	                            var dataDictAddToCart = new ViewDataDictionary(ViewData);
	                            dataDictAddToCart.TemplateInfo.HtmlFieldPrefix = $"addtocart_{Model.Id}";
	                            @await Html.PartialAsync("_AddToCart", Model.AddToCart, dataDictAddToCart)
                            }

                        	@await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.ProductDetailsOverviewBottom, additionalData = Model })
                        </div>
                        @if (!string.IsNullOrEmpty(Model.FullDescription))
                        {
                            <div class="full-description" itemprop="description">
                                @Html.Raw(Model.FullDescription)
                            </div>
                        }
                        <!--gift card-->
                        @{
                        	var dataDictGiftCard = new ViewDataDictionary(ViewData);
	                        dataDictGiftCard.TemplateInfo.HtmlFieldPrefix = $"giftcard_{Model.Id}";
	                        @await Html.PartialAsync("_GiftCardInfo", Model.GiftCard, dataDictGiftCard)
                        }
						@await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.ProductDetailsEssentialBottom, additionalData = Model })
                    </div>
                    @if (alternativeProductPageLayout)
                    {
                        @await Component.InvokeAsync("Widget", new { widgetZone = "product_pictures_in_tabs", Model.Id})
                    }
                @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.ProductDetailsBeforeCollateral, additionalData = Model })
                    <div class="product-collateral">
                        @await Html.PartialAsync("_ProductTierPrices", Model.TierPrices)
	                @await Html.PartialAsync("_ProductSpecifications", Model.ProductSpecifications)
	                @await Html.PartialAsync("_ProductTags", Model.ProductTags)
                        @await Component.InvokeAsync("ProductsAlsoPurchased", new { productId = Model.Id })
                	@await Component.InvokeAsync("RelatedProducts", new { productId = Model.Id })
                    </div>
                </div>
            </form>
        @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.ProductDetailsBottom, additionalData = Model })
        </div>
    </div>
</div>